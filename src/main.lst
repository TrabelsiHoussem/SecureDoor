CCS PCM C Compiler, Version 5.015, 5967               01-oct.-19 16:09

               Filename:   C:\Users\houst\Desktop\houssem\Travaille PFE\sarra_VF Pic keypad Lcd\c\main.lst

               ROM used:   1075 words (13%)
                           Largest free fragment is 2048
               RAM used:   36 (10%) at main() level
                           48 (13%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   2AF
0003:  NOP
.................... //LCD Module Connections   
.................... #define LCD_RS_PIN      PIN_D1                                    
.................... #define LCD_RW_PIN      PIN_D2  
.................... #define LCD_ENABLE_PIN  PIN_D3  
.................... #define LCD_DATA4       PIN_D4                                     
.................... #define LCD_DATA5       PIN_D5                                     
.................... #define LCD_DATA6       PIN_D6                            
.................... #define LCD_DATA7       PIN_D7 
.................... //End LCD Module Connections 
.................... #include <main.h> 
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  31
0009:  RETLW  32
000A:  RETLW  33
000B:  RETLW  34
000C:  RETLW  35
000D:  RETLW  36
000E:  RETLW  37
000F:  RETLW  38
0010:  RETLW  39
0011:  RETLW  2A
0012:  RETLW  30
0013:  RETLW  23
0014:  DATA 8C,2B
0015:  DATA 65,36
0016:  DATA E3,37
0017:  DATA ED,32
0018:  DATA 0A,26
0019:  DATA 43,22
001A:  DATA 00,00
001B:  DATA 0C,00
001C:  DATA CD,37
001D:  DATA 74,10
001E:  DATA E4,32
001F:  DATA 20,38
0020:  DATA E1,39
0021:  DATA F3,32
0022:  DATA 3A,00
0023:  DATA 0C,2B
0024:  DATA 65,39
0025:  DATA 69,33
0026:  DATA E9,31
0027:  DATA 61,3A
0028:  DATA E9,37
0029:  DATA 6E,17
002A:  DATA 2E,10
002B:  DATA 00,01
002C:  DATA 0C,10
002D:  DATA E3,37
002E:  DATA 72,39
002F:  DATA E5,31
0030:  DATA 74,10
0031:  DATA F0,30
0032:  DATA F3,39
0033:  DATA F7,37
0034:  DATA 72,32
0035:  DATA 20,1D
0036:  DATA 29,00
0037:  DATA 8C,36
0038:  DATA 70,10
0039:  DATA F3,37
003A:  DATA 6D,3A
003B:  DATA E8,34
003C:  DATA EE,33
003D:  DATA A0,2B
003E:  DATA F2,37
003F:  DATA EE,33
0040:  DATA 21,00
0041:  DATA 8C,26
0042:  DATA 6F,3A
0043:  DATA 20,32
0044:  DATA 65,10
0045:  DATA F0,30
0046:  DATA F3,39
0047:  DATA 65,1D
0048:  DATA 00,01
0049:  DATA 8C,36
004A:  DATA 70,10
004B:  DATA 69,37
004C:  DATA E3,37
004D:  DATA 72,39
004E:  DATA E5,31
004F:  DATA F4,32
0050:  DATA 21,00
0051:  DATA 0C,00
0052:  DATA 8C,36
0053:  DATA 70,10
0054:  DATA 69,37
0055:  DATA E3,37
0056:  DATA 72,39
0057:  DATA E5,31
0058:  DATA F4,32
0059:  DATA 21,00
005A:  DATA 0C,00
005B:  DATA 8C,26
005C:  DATA 6F,3A
005D:  DATA 20,32
005E:  DATA 65,10
005F:  DATA F0,30
0060:  DATA F3,39
0061:  DATA 65,1D
0062:  DATA 00,00
*
01B7:  MOVF   0B,W
01B8:  MOVWF  3D
01B9:  BCF    0B.7
01BA:  BSF    03.5
01BB:  BSF    03.6
01BC:  BSF    0C.7
01BD:  BSF    0C.0
01BE:  NOP
01BF:  NOP
01C0:  BCF    03.5
01C1:  BCF    03.6
01C2:  BTFSC  3D.7
01C3:  BSF    0B.7
01C4:  BSF    03.6
01C5:  MOVF   0C,W
01C6:  ANDLW  7F
01C7:  BTFSC  03.2
01C8:  GOTO   20B
01C9:  BCF    03.6
01CA:  MOVWF  3D
01CB:  BSF    03.6
01CC:  MOVF   0D,W
01CD:  BCF    03.6
01CE:  MOVWF  3E
01CF:  BSF    03.6
01D0:  MOVF   0F,W
01D1:  BCF    03.6
01D2:  MOVWF  3F
01D3:  MOVF   3D,W
01D4:  MOVWF  40
01D5:  CALL   18B
01D6:  MOVF   3E,W
01D7:  BSF    03.6
01D8:  MOVWF  0D
01D9:  BCF    03.6
01DA:  MOVF   3F,W
01DB:  BSF    03.6
01DC:  MOVWF  0F
01DD:  BCF    03.6
01DE:  MOVF   0B,W
01DF:  MOVWF  40
01E0:  BCF    0B.7
01E1:  BSF    03.5
01E2:  BSF    03.6
01E3:  BSF    0C.7
01E4:  BSF    0C.0
01E5:  NOP
01E6:  NOP
01E7:  BCF    03.5
01E8:  BCF    03.6
01E9:  BTFSC  40.7
01EA:  BSF    0B.7
01EB:  BSF    03.6
01EC:  RLF    0C,W
01ED:  RLF    0E,W
01EE:  ANDLW  7F
01EF:  BTFSC  03.2
01F0:  GOTO   20B
01F1:  BCF    03.6
01F2:  MOVWF  3D
01F3:  BSF    03.6
01F4:  MOVF   0D,W
01F5:  BCF    03.6
01F6:  MOVWF  3E
01F7:  BSF    03.6
01F8:  MOVF   0F,W
01F9:  BCF    03.6
01FA:  MOVWF  3F
01FB:  MOVF   3D,W
01FC:  MOVWF  40
01FD:  CALL   18B
01FE:  MOVF   3E,W
01FF:  BSF    03.6
0200:  MOVWF  0D
0201:  BCF    03.6
0202:  MOVF   3F,W
0203:  BSF    03.6
0204:  MOVWF  0F
0205:  INCF   0D,F
0206:  BTFSC  03.2
0207:  INCF   0F,F
0208:  BCF    03.6
0209:  GOTO   1B7
020A:  BSF    03.6
020B:  BCF    03.6
020C:  RETURN
*
025D:  CLRF   77
025E:  CLRF   78
025F:  MOVF   41,W
0260:  BCF    03.0
0261:  BTFSC  42.0
0262:  ADDWF  77,F
0263:  RRF    77,F
0264:  RRF    78,F
0265:  BTFSC  42.1
0266:  ADDWF  77,F
0267:  RRF    77,F
0268:  RRF    78,F
0269:  BTFSC  42.2
026A:  ADDWF  77,F
026B:  RRF    77,F
026C:  RRF    78,F
026D:  BTFSC  42.3
026E:  ADDWF  77,F
026F:  RRF    77,F
0270:  RRF    78,F
0271:  BTFSC  42.4
0272:  ADDWF  77,F
0273:  RRF    77,F
0274:  RRF    78,F
0275:  BTFSC  42.5
0276:  ADDWF  77,F
0277:  RRF    77,F
0278:  RRF    78,F
0279:  BTFSC  42.6
027A:  ADDWF  77,F
027B:  RRF    77,F
027C:  RRF    78,F
027D:  BTFSC  42.7
027E:  ADDWF  77,F
027F:  RRF    77,F
0280:  RRF    78,F
*
0297:  MOVF   00,F
0298:  BTFSC  03.2
0299:  GOTO   2AC
029A:  CLRF   3F
029B:  MOVF   04,W
029C:  MOVWF  3E
029D:  BCF    3F.0
029E:  BTFSC  03.7
029F:  BSF    3F.0
02A0:  MOVF   00,W
02A1:  MOVWF  40
02A2:  CALL   18B
02A3:  MOVF   3E,W
02A4:  MOVWF  04
02A5:  BCF    03.7
02A6:  BTFSC  3F.0
02A7:  BSF    03.7
02A8:  INCF   04,F
02A9:  BTFSC  03.2
02AA:  INCF   05,F
02AB:  GOTO   297
02AC:  BCF    0A.3
02AD:  BCF    0A.4
02AE:  GOTO   34B (RETURN)
....................  
.................... #list 
....................  
.................... #device ADC=16 
.................... #use delay(crystal=8000000) 
....................  
....................  
.................... #fuses HS,NOWDT,NOPROTECT,NOLVP  
.................... #use delay (clock=8000000) 
*
0063:  MOVLW  42
0064:  MOVWF  04
0065:  BCF    03.7
0066:  MOVF   00,W
0067:  BTFSC  03.2
0068:  GOTO   076
0069:  MOVLW  02
006A:  MOVWF  78
006B:  CLRF   77
006C:  DECFSZ 77,F
006D:  GOTO   06C
006E:  DECFSZ 78,F
006F:  GOTO   06B
0070:  MOVLW  97
0071:  MOVWF  77
0072:  DECFSZ 77,F
0073:  GOTO   072
0074:  DECFSZ 00,F
0075:  GOTO   069
0076:  RETURN
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
*
00DC:  BSF    08.4
....................    output_float(LCD_DATA5); 
00DD:  BSF    08.5
....................    output_float(LCD_DATA6); 
00DE:  BSF    08.6
....................    output_float(LCD_DATA7); 
00DF:  BSF    08.7
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
00E0:  BCF    03.5
00E1:  BSF    08.2
00E2:  BSF    03.5
00E3:  BCF    08.2
....................    delay_cycles(1); 
00E4:  NOP
....................    lcd_output_enable(1); 
00E5:  BCF    03.5
00E6:  BSF    08.3
00E7:  BSF    03.5
00E8:  BCF    08.3
....................    delay_cycles(1); 
00E9:  NOP
....................    high = lcd_read_nibble(); 
00EA:  BCF    03.5
00EB:  CALL   0A3
00EC:  MOVF   78,W
00ED:  MOVWF  48
....................        
....................    lcd_output_enable(0); 
00EE:  BCF    08.3
00EF:  BSF    03.5
00F0:  BCF    08.3
....................    delay_cycles(1); 
00F1:  NOP
....................    lcd_output_enable(1); 
00F2:  BCF    03.5
00F3:  BSF    08.3
00F4:  BSF    03.5
00F5:  BCF    08.3
....................    delay_us(1); 
00F6:  GOTO   0F7
....................    low = lcd_read_nibble(); 
00F7:  BCF    03.5
00F8:  CALL   0A3
00F9:  MOVF   78,W
00FA:  MOVWF  47
....................        
....................    lcd_output_enable(0); 
00FB:  BCF    08.3
00FC:  BSF    03.5
00FD:  BCF    08.3
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
00FE:  BCF    08.4
....................    output_drive(LCD_DATA5); 
00FF:  BCF    08.5
....................    output_drive(LCD_DATA6); 
0100:  BCF    08.6
....................    output_drive(LCD_DATA7); 
0101:  BCF    08.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0102:  BCF    03.5
0103:  SWAPF  48,W
0104:  MOVWF  77
0105:  MOVLW  F0
0106:  ANDWF  77,F
0107:  MOVF   77,W
0108:  IORWF  47,W
0109:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
00A3:  CLRF   49
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
00A4:  BSF    03.5
00A5:  BSF    08.4
00A6:  MOVLW  00
00A7:  BCF    03.5
00A8:  BTFSC  08.4
00A9:  MOVLW  01
00AA:  IORWF  49,F
....................    n |= input(LCD_DATA5) << 1; 
00AB:  BSF    03.5
00AC:  BSF    08.5
00AD:  MOVLW  00
00AE:  BCF    03.5
00AF:  BTFSC  08.5
00B0:  MOVLW  01
00B1:  MOVWF  77
00B2:  BCF    03.0
00B3:  RLF    77,F
00B4:  MOVF   77,W
00B5:  IORWF  49,F
....................    n |= input(LCD_DATA6) << 2; 
00B6:  BSF    03.5
00B7:  BSF    08.6
00B8:  MOVLW  00
00B9:  BCF    03.5
00BA:  BTFSC  08.6
00BB:  MOVLW  01
00BC:  MOVWF  77
00BD:  RLF    77,F
00BE:  RLF    77,F
00BF:  MOVLW  FC
00C0:  ANDWF  77,F
00C1:  MOVF   77,W
00C2:  IORWF  49,F
....................    n |= input(LCD_DATA7) << 3; 
00C3:  BSF    03.5
00C4:  BSF    08.7
00C5:  MOVLW  00
00C6:  BCF    03.5
00C7:  BTFSC  08.7
00C8:  MOVLW  01
00C9:  MOVWF  77
00CA:  RLF    77,F
00CB:  RLF    77,F
00CC:  RLF    77,F
00CD:  MOVLW  F8
00CE:  ANDWF  77,F
00CF:  MOVF   77,W
00D0:  IORWF  49,F
....................     
....................    return(n); 
00D1:  MOVF   49,W
00D2:  MOVWF  78
....................   #else 
00D3:  RETURN
....................    return(lcd.data); 
....................   #endif 
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
0077:  BTFSC  48.0
0078:  GOTO   07B
0079:  BCF    08.4
007A:  GOTO   07C
007B:  BSF    08.4
007C:  BSF    03.5
007D:  BCF    08.4
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
007E:  BCF    03.5
007F:  BTFSC  48.1
0080:  GOTO   083
0081:  BCF    08.5
0082:  GOTO   084
0083:  BSF    08.5
0084:  BSF    03.5
0085:  BCF    08.5
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
0086:  BCF    03.5
0087:  BTFSC  48.2
0088:  GOTO   08B
0089:  BCF    08.6
008A:  GOTO   08C
008B:  BSF    08.6
008C:  BSF    03.5
008D:  BCF    08.6
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
008E:  BCF    03.5
008F:  BTFSC  48.3
0090:  GOTO   093
0091:  BCF    08.7
0092:  GOTO   094
0093:  BSF    08.7
0094:  BSF    03.5
0095:  BCF    08.7
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
0096:  NOP
....................    lcd_output_enable(1); 
0097:  BCF    03.5
0098:  BSF    08.3
0099:  BSF    03.5
009A:  BCF    08.3
....................    delay_us(2); 
009B:  GOTO   09C
009C:  GOTO   09D
....................    lcd_output_enable(0); 
009D:  BCF    03.5
009E:  BCF    08.3
009F:  BSF    03.5
00A0:  BCF    08.3
00A1:  BCF    03.5
00A2:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
00D4:  BSF    03.5
00D5:  BCF    08.3
....................    lcd_rs_tris(); 
00D6:  BCF    08.1
....................    lcd_rw_tris(); 
00D7:  BCF    08.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
00D8:  BCF    03.5
00D9:  BCF    08.1
00DA:  BSF    03.5
00DB:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
010A:  MOVF   78,W
010B:  MOVWF  47
010C:  BTFSS  47.7
010D:  GOTO   110
010E:  BSF    03.5
010F:  GOTO   0DC
....................    lcd_output_rs(address); 
0110:  MOVF   45,F
0111:  BTFSS  03.2
0112:  GOTO   115
0113:  BCF    08.1
0114:  GOTO   116
0115:  BSF    08.1
0116:  BSF    03.5
0117:  BCF    08.1
....................    delay_cycles(1); 
0118:  NOP
....................    lcd_output_rw(0); 
0119:  BCF    03.5
011A:  BCF    08.2
011B:  BSF    03.5
011C:  BCF    08.2
....................    delay_cycles(1); 
011D:  NOP
....................    lcd_output_enable(0); 
011E:  BCF    03.5
011F:  BCF    08.3
0120:  BSF    03.5
0121:  BCF    08.3
....................    lcd_send_nibble(n >> 4); 
0122:  BCF    03.5
0123:  SWAPF  46,W
0124:  MOVWF  47
0125:  MOVLW  0F
0126:  ANDWF  47,F
0127:  MOVF   47,W
0128:  MOVWF  48
0129:  CALL   077
....................    lcd_send_nibble(n & 0xf); 
012A:  MOVF   46,W
012B:  ANDLW  0F
012C:  MOVWF  47
012D:  MOVWF  48
012E:  CALL   077
012F:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
0130:  MOVLW  28
0131:  MOVWF  3E
0132:  MOVLW  0C
0133:  MOVWF  3F
0134:  MOVLW  01
0135:  MOVWF  40
0136:  MOVLW  06
0137:  MOVWF  41
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
0138:  BCF    08.3
0139:  BSF    03.5
013A:  BCF    08.3
....................    lcd_output_rs(0); 
013B:  BCF    03.5
013C:  BCF    08.1
013D:  BSF    03.5
013E:  BCF    08.1
....................    lcd_output_rw(0); 
013F:  BCF    03.5
0140:  BCF    08.2
0141:  BSF    03.5
0142:  BCF    08.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
0143:  BCF    08.4
....................    output_drive(LCD_DATA5); 
0144:  BCF    08.5
....................    output_drive(LCD_DATA6); 
0145:  BCF    08.6
....................    output_drive(LCD_DATA7); 
0146:  BCF    08.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
0147:  BCF    08.3
....................    lcd_rs_tris(); 
0148:  BCF    08.1
....................    lcd_rw_tris(); 
0149:  BCF    08.2
....................  #endif 
....................      
....................    delay_ms(15); 
014A:  MOVLW  0F
014B:  BCF    03.5
014C:  MOVWF  42
014D:  CALL   063
....................    for(i=1;i<=3;++i) 
014E:  MOVLW  01
014F:  MOVWF  3D
0150:  MOVF   3D,W
0151:  SUBLW  03
0152:  BTFSS  03.0
0153:  GOTO   15C
....................    { 
....................        lcd_send_nibble(3); 
0154:  MOVLW  03
0155:  MOVWF  48
0156:  CALL   077
....................        delay_ms(5); 
0157:  MOVLW  05
0158:  MOVWF  42
0159:  CALL   063
015A:  INCF   3D,F
015B:  GOTO   150
....................    } 
....................     
....................    lcd_send_nibble(2); 
015C:  MOVLW  02
015D:  MOVWF  48
015E:  CALL   077
....................    delay_ms(5); 
015F:  MOVLW  05
0160:  MOVWF  42
0161:  CALL   063
....................    for(i=0;i<=3;++i) 
0162:  CLRF   3D
0163:  MOVF   3D,W
0164:  SUBLW  03
0165:  BTFSS  03.0
0166:  GOTO   173
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
0167:  MOVLW  3E
0168:  ADDWF  3D,W
0169:  MOVWF  04
016A:  BCF    03.7
016B:  MOVF   00,W
016C:  MOVWF  42
016D:  CLRF   45
016E:  MOVF   42,W
016F:  MOVWF  46
0170:  CALL   0D4
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0171:  INCF   3D,F
0172:  GOTO   163
0173:  BCF    0A.3
0174:  BCF    0A.4
0175:  GOTO   2DC (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
*
0179:  DECFSZ 42,W
017A:  GOTO   17C
017B:  GOTO   17F
....................       address=LCD_LINE_TWO; 
017C:  MOVLW  40
017D:  MOVWF  43
017E:  GOTO   180
....................    else 
....................       address=0; 
017F:  CLRF   43
....................       
....................    address+=x-1; 
0180:  MOVLW  01
0181:  SUBWF  41,W
0182:  ADDWF  43,F
....................    lcd_send_byte(0,0x80|address); 
0183:  MOVF   43,W
0184:  IORLW  80
0185:  MOVWF  44
0186:  CLRF   45
0187:  MOVF   44,W
0188:  MOVWF  46
0189:  CALL   0D4
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
018A:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
018B:  MOVF   40,W
018C:  XORLW  07
018D:  BTFSC  03.2
018E:  GOTO   199
018F:  XORLW  0B
0190:  BTFSC  03.2
0191:  GOTO   19E
0192:  XORLW  06
0193:  BTFSC  03.2
0194:  GOTO   1A6
0195:  XORLW  02
0196:  BTFSC  03.2
0197:  GOTO   1AC
0198:  GOTO   1B1
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
0199:  MOVLW  01
019A:  MOVWF  41
019B:  MOVWF  42
019C:  CALL   179
019D:  GOTO   1B6
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
019E:  CLRF   45
019F:  MOVLW  01
01A0:  MOVWF  46
01A1:  CALL   0D4
....................                      delay_ms(2); 
01A2:  MOVLW  02
01A3:  MOVWF  42
01A4:  CALL   063
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
01A5:  GOTO   1B6
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
01A6:  MOVLW  01
01A7:  MOVWF  41
01A8:  MOVLW  02
01A9:  MOVWF  42
01AA:  CALL   179
01AB:  GOTO   1B6
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
01AC:  CLRF   45
01AD:  MOVLW  10
01AE:  MOVWF  46
01AF:  CALL   0D4
01B0:  GOTO   1B6
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
01B1:  MOVLW  01
01B2:  MOVWF  45
01B3:  MOVF   40,W
01B4:  MOVWF  46
01B5:  CALL   0D4
....................      #endif 
....................    } 
01B6:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
.................... #define use_portb_kbd TRUE  
.................... #include <kbd.c> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                             KBD.C                                 //// 
.................... ////                  Generic keypad scan driver                       //// 
.................... ////                                                                   //// 
.................... ////  kbd_init()   Must be called before any other function.           //// 
.................... ////                                                                   //// 
.................... ////  c = kbd_getc(c)  Will return a key value if pressed or /0 if not //// 
.................... ////                   This function should be called frequently so as //// 
.................... ////                   not to miss a key press.                        //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... ////////////////// The following defines the keypad layout on port D 
....................  
.................... // Un-comment the following define to use port B 
.................... // #define use_portb_kbd TRUE 
....................  
.................... // Make sure the port used has pull-up resistors (or the LCD) on 
.................... // the column pins 
....................  
.................... #if defined use_portb_kbd 
....................    #byte kbd = getenv("SFR:PORTB") 
.................... #else 
....................    #byte kbd = getenv("SFR:PORTD") 
.................... #endif 
....................  
.................... #if defined use_portb_kbd 
....................    #define set_tris_kbd(x) set_tris_b(x) 
.................... #else 
....................    #define set_tris_kbd(x) set_tris_d(x) 
.................... #endif 
....................  
.................... //Keypad connection:   (for example column 0 is B2) 
.................... //                Bx: 
....................  
.................... #ifdef blue_keypad  ///////////////////////////////////// For the blue keypad 
.................... #define COL0 (1 << 2) 
.................... #define COL1 (1 << 3) 
.................... #define COL2 (1 << 6) 
....................  
.................... #define ROW0 (1 << 4) 
.................... #define ROW1 (1 << 7) 
.................... #define ROW2 (1 << 1) 
.................... #define ROW3 (1 << 5) 
....................  
.................... #else ////////////////////////////////////////////////// For the black keypad 
.................... #define COL0 (1 << 5) 
.................... #define COL1 (1 << 6) 
.................... #define COL2 (1 << 7) 
....................  
.................... #define ROW0 (1 << 1) 
.................... #define ROW1 (1 << 2) 
.................... #define ROW2 (1 << 3) 
.................... #define ROW3 (1 << 4) 
....................  
.................... #endif 
....................  
.................... #define ALL_ROWS (ROW0|ROW1|ROW2|ROW3) 
.................... #define ALL_PINS (ALL_ROWS|COL0|COL1|COL2) 
....................  
.................... // Keypad layout: 
.................... char const KEYS[4][3] = {{'1','2','3'}, 
....................                          {'4','5','6'}, 
....................                          {'7','8','9'}, 
....................                          {'*','0','#'}}; 
....................  
.................... #define KBD_DEBOUNCE_FACTOR 33    // Set this number to apx n/333 where 
....................                                   // n is the number of times you expect 
....................                                   // to call kbd_getc each second 
....................  
....................  
.................... void kbd_init() { 
*
0176:  BCF    0A.3
0177:  BCF    0A.4
0178:  GOTO   2DD (RETURN)
.................... } 
....................  
.................... char kbd_getc( ) { 
....................    static BYTE kbd_call_count; 
*
02BE:  BCF    03.5
02BF:  CLRF   20
....................    static int1 kbd_down; 
02C0:  BCF    21.0
....................    static char last_key; 
02C1:  CLRF   22
....................    static BYTE col; 
02C2:  CLRF   23
....................  
....................    BYTE kchar; 
....................    BYTE row; 
....................  
....................    kchar='\0'; 
*
020D:  CLRF   3F
....................    if(++kbd_call_count>KBD_DEBOUNCE_FACTOR) { 
020E:  INCF   20,F
020F:  MOVF   20,W
0210:  SUBLW  21
0211:  BTFSC  03.0
0212:  GOTO   28E
....................        switch (col) { 
0213:  MOVF   23,W
0214:  BTFSC  03.2
0215:  GOTO   21D
0216:  XORLW  01
0217:  BTFSC  03.2
0218:  GOTO   223
0219:  XORLW  03
021A:  BTFSC  03.2
021B:  GOTO   229
021C:  GOTO   22E
....................          case 0   : set_tris_kbd(ALL_PINS&~COL0); 
021D:  MOVLW  DE
021E:  BSF    03.5
021F:  MOVWF  06
....................                     kbd=~COL0&ALL_PINS; 
0220:  BCF    03.5
0221:  MOVWF  06
....................                     break; 
0222:  GOTO   22E
....................          case 1   : set_tris_kbd(ALL_PINS&~COL1); 
0223:  MOVLW  BE
0224:  BSF    03.5
0225:  MOVWF  06
....................                     kbd=~COL1&ALL_PINS; 
0226:  BCF    03.5
0227:  MOVWF  06
....................                     break; 
0228:  GOTO   22E
....................          case 2   : set_tris_kbd(ALL_PINS&~COL2); 
0229:  MOVLW  7E
022A:  BSF    03.5
022B:  MOVWF  06
....................                     kbd=~COL2&ALL_PINS; 
022C:  BCF    03.5
022D:  MOVWF  06
....................                     break; 
....................        } 
....................  
....................        if(kbd_down) { 
022E:  BTFSS  21.0
022F:  GOTO   23A
....................          if((kbd & (ALL_ROWS))==(ALL_ROWS)) { 
0230:  MOVF   06,W
0231:  ANDLW  1E
0232:  SUBLW  1E
0233:  BTFSS  03.2
0234:  GOTO   239
....................            kbd_down=FALSE; 
0235:  BCF    21.0
....................            kchar=last_key; 
0236:  MOVF   22,W
0237:  MOVWF  3F
....................            last_key='\0'; 
0238:  CLRF   22
....................          } 
....................        } else { 
0239:  GOTO   28D
....................           if((kbd & (ALL_ROWS))!=(ALL_ROWS)) { 
023A:  MOVF   06,W
023B:  ANDLW  1E
023C:  SUBLW  1E
023D:  BTFSC  03.2
023E:  GOTO   288
....................              if((kbd & ROW0)==0) 
023F:  MOVF   06,W
0240:  ANDLW  02
0241:  BTFSS  03.2
0242:  GOTO   245
....................                row=0; 
0243:  CLRF   40
0244:  GOTO   259
....................              else if((kbd & ROW1)==0) 
0245:  MOVF   06,W
0246:  ANDLW  04
0247:  BTFSS  03.2
0248:  GOTO   24C
....................                row=1; 
0249:  MOVLW  01
024A:  MOVWF  40
024B:  GOTO   259
....................              else if((kbd & ROW2)==0) 
024C:  MOVF   06,W
024D:  ANDLW  08
024E:  BTFSS  03.2
024F:  GOTO   253
....................                row=2; 
0250:  MOVLW  02
0251:  MOVWF  40
0252:  GOTO   259
....................              else if((kbd & ROW3)==0) 
0253:  MOVF   06,W
0254:  ANDLW  10
0255:  BTFSS  03.2
0256:  GOTO   259
....................                row=3; 
0257:  MOVLW  03
0258:  MOVWF  40
....................              last_key =KEYS[row][col]; 
0259:  MOVF   40,W
025A:  MOVWF  41
025B:  MOVLW  03
025C:  MOVWF  42
*
0281:  MOVF   23,W
0282:  ADDWF  78,W
0283:  CALL   004
0284:  MOVWF  78
0285:  MOVWF  22
....................              kbd_down = TRUE; 
0286:  BSF    21.0
....................           } else { 
0287:  GOTO   28D
....................              ++col; 
0288:  INCF   23,F
....................              if(col==3) 
0289:  MOVF   23,W
028A:  SUBLW  03
028B:  BTFSC  03.2
....................                col=0; 
028C:  CLRF   23
....................           } 
....................        } 
....................       kbd_call_count=0; 
028D:  CLRF   20
....................    } 
....................   set_tris_kbd(ALL_PINS); 
028E:  MOVLW  FE
028F:  BSF    03.5
0290:  MOVWF  06
....................   return(kchar); 
0291:  BCF    03.5
0292:  MOVF   3F,W
0293:  MOVWF  78
0294:  BCF    0A.3
0295:  BCF    0A.4
0296:  GOTO   307 (RETURN)
.................... } 
....................  
....................  
....................  
.................... char mp[12],monmp[11]="1234567890"; 
*
02C3:  MOVLW  31
02C4:  MOVWF  30
02C5:  MOVLW  32
02C6:  MOVWF  31
02C7:  MOVLW  33
02C8:  MOVWF  32
02C9:  MOVLW  34
02CA:  MOVWF  33
02CB:  MOVLW  35
02CC:  MOVWF  34
02CD:  MOVLW  36
02CE:  MOVWF  35
02CF:  MOVLW  37
02D0:  MOVWF  36
02D1:  MOVLW  38
02D2:  MOVWF  37
02D3:  MOVLW  39
02D4:  MOVWF  38
02D5:  MOVLW  30
02D6:  MOVWF  39
02D7:  CLRF   3A
.................... int i=1; 
.................... int1 p=0; 
.................... int k=0; 
....................  
.................... void main() 
*
02AF:  MOVF   03,W
02B0:  ANDLW  1F
02B1:  MOVWF  03
02B2:  MOVLW  01
02B3:  MOVWF  3B
02B4:  BCF    21.1
02B5:  CLRF   3C
02B6:  BSF    03.5
02B7:  BSF    1F.0
02B8:  BSF    1F.1
02B9:  BSF    1F.2
02BA:  BCF    1F.3
02BB:  MOVLW  07
02BC:  MOVWF  1C
02BD:  BCF    03.7
.................... { port_b_pullups(TRUE);  
*
02D8:  BSF    03.5
02D9:  BCF    01.7
....................   lcd_init(); 
02DA:  BCF    03.5
02DB:  GOTO   130
....................    kbd_init(); 
02DC:  GOTO   176
....................     
....................  
....................    lcd_putc("\fWelcome\nLCD"); 
02DD:  MOVLW  14
02DE:  BSF    03.6
02DF:  MOVWF  0D
02E0:  MOVLW  00
02E1:  MOVWF  0F
02E2:  BCF    03.6
02E3:  CALL   1B7
....................    delay_ms(3000); 
02E4:  MOVLW  0C
02E5:  MOVWF  3D
02E6:  MOVLW  FA
02E7:  MOVWF  42
02E8:  CALL   063
02E9:  DECFSZ 3D,F
02EA:  GOTO   2E6
....................  
....................    lcd_putc("\f"); 
02EB:  MOVLW  1B
02EC:  BSF    03.6
02ED:  MOVWF  0D
02EE:  MOVLW  00
02EF:  MOVWF  0F
02F0:  BCF    03.6
02F1:  CALL   1B7
....................    lcd_putc("Mot de passe:"); 
02F2:  MOVLW  1C
02F3:  BSF    03.6
02F4:  MOVWF  0D
02F5:  MOVLW  00
02F6:  MOVWF  0F
02F7:  BCF    03.6
02F8:  CALL   1B7
....................    enable_interrupts(GLOBAL); 
02F9:  MOVLW  C0
02FA:  IORWF  0B,F
....................    enable_interrupts(INT_TIMER0); //a verfier  
02FB:  BSF    0B.5
....................     
.................... while(true){ 
....................  
....................    while(!(mp[i]=kbd_getc())); 
02FC:  MOVLW  24
02FD:  ADDWF  3B,W
02FE:  MOVWF  78
02FF:  CLRF   7A
0300:  BTFSC  03.0
0301:  INCF   7A,F
0302:  MOVF   78,W
0303:  MOVWF  3D
0304:  MOVF   7A,W
0305:  MOVWF  3E
0306:  GOTO   20D
0307:  MOVF   3D,W
0308:  MOVWF  04
0309:  BCF    03.7
030A:  BTFSC  3E.0
030B:  BSF    03.7
030C:  MOVF   78,W
030D:  MOVWF  00
030E:  MOVF   78,W
030F:  BTFSC  03.2
0310:  GOTO   2FC
....................  
....................    lcd_gotoxy(i,2); 
0311:  MOVF   3B,W
0312:  MOVWF  41
0313:  MOVLW  02
0314:  MOVWF  42
0315:  CALL   179
....................    lcd_putc(mp[i]); 
0316:  MOVLW  24
0317:  ADDWF  3B,W
0318:  MOVWF  04
0319:  BCF    03.7
031A:  MOVF   00,W
031B:  MOVWF  3D
031C:  MOVWF  40
031D:  CALL   18B
....................     if (i==10) 
031E:  MOVF   3B,W
031F:  SUBLW  0A
0320:  BTFSS  03.2
0321:  GOTO   42F
....................       {i=0; 
0322:  CLRF   3B
....................        p=0; 
0323:  BCF    21.1
....................        lcd_gotoxy(1,2); 
0324:  MOVLW  01
0325:  MOVWF  41
0326:  MOVLW  02
0327:  MOVWF  42
0328:  CALL   179
....................        lcd_putc("\fVerification.. " );  
0329:  MOVLW  23
032A:  BSF    03.6
032B:  MOVWF  0D
032C:  MOVLW  00
032D:  MOVWF  0F
032E:  BCF    03.6
032F:  CALL   1B7
....................        delay_ms(1000); 
0330:  MOVLW  04
0331:  MOVWF  3D
0332:  MOVLW  FA
0333:  MOVWF  42
0334:  CALL   063
0335:  DECFSZ 3D,F
0336:  GOTO   332
....................        for (i=0;i<10;i++) 
0337:  CLRF   3B
0338:  MOVF   3B,W
0339:  SUBLW  09
033A:  BTFSS  03.0
033B:  GOTO   35C
....................             {  lcd_gotoxy(1,1); 
033C:  MOVLW  01
033D:  MOVWF  41
033E:  MOVWF  42
033F:  CALL   179
....................                printf(lcd_putc,"%s",monmp[i]); 
0340:  MOVLW  30
0341:  ADDWF  3B,W
0342:  MOVWF  04
0343:  BCF    03.7
0344:  MOVF   00,W
0345:  MOVWF  3D
0346:  MOVWF  04
0347:  BCF    03.7
0348:  BTFSC  3E.0
0349:  BSF    03.7
034A:  GOTO   297
....................                if (mp[i] != monmp[i-1])  
034B:  MOVLW  24
034C:  ADDWF  3B,W
034D:  MOVWF  04
034E:  BCF    03.7
034F:  MOVF   00,W
0350:  MOVWF  3D
0351:  MOVLW  01
0352:  SUBWF  3B,W
0353:  ADDLW  30
0354:  MOVWF  04
0355:  BCF    03.7
0356:  MOVF   00,W
0357:  SUBWF  3D,W
0358:  BTFSS  03.2
....................                { 
....................                p=1; 
0359:  BSF    21.1
....................                }  
035A:  INCF   3B,F
035B:  GOTO   338
....................             } 
....................      
....................     if ( p==0) 
035C:  BTFSC  21.1
035D:  GOTO   378
....................         {output_high(pin_a0); 
035E:  BSF    03.5
035F:  BCF    05.0
0360:  BCF    03.5
0361:  BSF    05.0
....................         delay_ms(1000); 
0362:  MOVLW  04
0363:  MOVWF  3D
0364:  MOVLW  FA
0365:  MOVWF  42
0366:  CALL   063
0367:  DECFSZ 3D,F
0368:  GOTO   364
....................          lcd_gotoxy(1,1);  
0369:  MOVLW  01
036A:  MOVWF  41
036B:  MOVWF  42
036C:  CALL   179
....................          lcd_putc("\f correct password :)"); 
036D:  MOVLW  2C
036E:  BSF    03.6
036F:  MOVWF  0D
0370:  MOVLW  00
0371:  MOVWF  0F
0372:  BCF    03.6
0373:  CALL   1B7
....................          output_low(pin_a1); 
0374:  BSF    03.5
0375:  BCF    05.1
0376:  BCF    03.5
0377:  BCF    05.1
....................          } 
....................  
....................  
....................     if ( p==1) 
0378:  BTFSS  21.1
0379:  GOTO   42D
....................        {         
....................         lcd_gotoxy(1,1); 
037A:  MOVLW  01
037B:  MOVWF  41
037C:  MOVWF  42
037D:  CALL   179
....................         lcd_putc("\fmp somthing Wrong!" ); 
037E:  MOVLW  37
037F:  BSF    03.6
0380:  MOVWF  0D
0381:  MOVLW  00
0382:  MOVWF  0F
0383:  BCF    03.6
0384:  CALL   1B7
....................         delay_ms(1000); 
0385:  MOVLW  04
0386:  MOVWF  3D
0387:  MOVLW  FA
0388:  MOVWF  42
0389:  CALL   063
038A:  DECFSZ 3D,F
038B:  GOTO   387
....................         output_high(pin_a1) ; 
038C:  BSF    03.5
038D:  BCF    05.1
038E:  BCF    03.5
038F:  BSF    05.1
....................         output_low(pin_a0); 
0390:  BSF    03.5
0391:  BCF    05.0
0392:  BCF    03.5
0393:  BCF    05.0
....................         lcd_gotoxy(1,1); 
0394:  MOVLW  01
0395:  MOVWF  41
0396:  MOVWF  42
0397:  CALL   179
....................         lcd_putc("\fMot de passe:" ); 
0398:  MOVLW  41
0399:  BSF    03.6
039A:  MOVWF  0D
039B:  MOVLW  00
039C:  MOVWF  0F
039D:  BCF    03.6
039E:  CALL   1B7
....................         delay_ms(1000); 
039F:  MOVLW  04
03A0:  MOVWF  3D
03A1:  MOVLW  FA
03A2:  MOVWF  42
03A3:  CALL   063
03A4:  DECFSZ 3D,F
03A5:  GOTO   3A1
....................         output_high(pin_a1) ; 
03A6:  BSF    03.5
03A7:  BCF    05.1
03A8:  BCF    03.5
03A9:  BSF    05.1
....................         output_low(pin_a0); 
03AA:  BSF    03.5
03AB:  BCF    05.0
03AC:  BCF    03.5
03AD:  BCF    05.0
....................         k++; 
03AE:  INCF   3C,F
....................         if(k==3){ 
03AF:  MOVF   3C,W
03B0:  SUBLW  03
03B1:  BTFSS  03.2
03B2:  GOTO   42D
....................         lcd_putc("\fmp incorrecte!" ); 
03B3:  MOVLW  49
03B4:  BSF    03.6
03B5:  MOVWF  0D
03B6:  MOVLW  00
03B7:  MOVWF  0F
03B8:  BCF    03.6
03B9:  CALL   1B7
....................         delay_ms(1000); 
03BA:  MOVLW  04
03BB:  MOVWF  3D
03BC:  MOVLW  FA
03BD:  MOVWF  42
03BE:  CALL   063
03BF:  DECFSZ 3D,F
03C0:  GOTO   3BC
....................         lcd_putc("\f" ); 
03C1:  MOVLW  51
03C2:  BSF    03.6
03C3:  MOVWF  0D
03C4:  MOVLW  00
03C5:  MOVWF  0F
03C6:  BCF    03.6
03C7:  CALL   1B7
....................          delay_ms(1000); 
03C8:  MOVLW  04
03C9:  MOVWF  3D
03CA:  MOVLW  FA
03CB:  MOVWF  42
03CC:  CALL   063
03CD:  DECFSZ 3D,F
03CE:  GOTO   3CA
....................          lcd_putc("\fmp incorrecte!" ); 
03CF:  MOVLW  52
03D0:  BSF    03.6
03D1:  MOVWF  0D
03D2:  MOVLW  00
03D3:  MOVWF  0F
03D4:  BCF    03.6
03D5:  CALL   1B7
....................         delay_ms(1000); 
03D6:  MOVLW  04
03D7:  MOVWF  3D
03D8:  MOVLW  FA
03D9:  MOVWF  42
03DA:  CALL   063
03DB:  DECFSZ 3D,F
03DC:  GOTO   3D8
....................         lcd_putc("\f" ); 
03DD:  MOVLW  5A
03DE:  BSF    03.6
03DF:  MOVWF  0D
03E0:  MOVLW  00
03E1:  MOVWF  0F
03E2:  BCF    03.6
03E3:  CALL   1B7
....................         delay_ms(1000); 
03E4:  MOVLW  04
03E5:  MOVWF  3D
03E6:  MOVLW  FA
03E7:  MOVWF  42
03E8:  CALL   063
03E9:  DECFSZ 3D,F
03EA:  GOTO   3E6
....................         lcd_putc("\fMot de passe:" ); 
03EB:  MOVLW  5B
03EC:  BSF    03.6
03ED:  MOVWF  0D
03EE:  MOVLW  00
03EF:  MOVWF  0F
03F0:  BCF    03.6
03F1:  CALL   1B7
....................         output_high(pin_a2) ; 
03F2:  BSF    03.5
03F3:  BCF    05.2
03F4:  BCF    03.5
03F5:  BSF    05.2
....................         delay_ms(1000); 
03F6:  MOVLW  04
03F7:  MOVWF  3D
03F8:  MOVLW  FA
03F9:  MOVWF  42
03FA:  CALL   063
03FB:  DECFSZ 3D,F
03FC:  GOTO   3F8
....................         output_low(pin_a2) ; 
03FD:  BSF    03.5
03FE:  BCF    05.2
03FF:  BCF    03.5
0400:  BCF    05.2
....................         delay_ms(1000); 
0401:  MOVLW  04
0402:  MOVWF  3D
0403:  MOVLW  FA
0404:  MOVWF  42
0405:  CALL   063
0406:  DECFSZ 3D,F
0407:  GOTO   403
....................         output_high(pin_a2) ; 
0408:  BSF    03.5
0409:  BCF    05.2
040A:  BCF    03.5
040B:  BSF    05.2
....................         delay_ms(1000); 
040C:  MOVLW  04
040D:  MOVWF  3D
040E:  MOVLW  FA
040F:  MOVWF  42
0410:  CALL   063
0411:  DECFSZ 3D,F
0412:  GOTO   40E
....................         output_low(pin_a2) ; 
0413:  BSF    03.5
0414:  BCF    05.2
0415:  BCF    03.5
0416:  BCF    05.2
....................         delay_ms(1000); 
0417:  MOVLW  04
0418:  MOVWF  3D
0419:  MOVLW  FA
041A:  MOVWF  42
041B:  CALL   063
041C:  DECFSZ 3D,F
041D:  GOTO   419
....................         output_high(pin_a2) ; 
041E:  BSF    03.5
041F:  BCF    05.2
0420:  BCF    03.5
0421:  BSF    05.2
....................         delay_ms(1000); 
0422:  MOVLW  04
0423:  MOVWF  3D
0424:  MOVLW  FA
0425:  MOVWF  42
0426:  CALL   063
0427:  DECFSZ 3D,F
0428:  GOTO   424
....................         output_low(pin_a2) ; 
0429:  BSF    03.5
042A:  BCF    05.2
042B:  BCF    03.5
042C:  BCF    05.2
....................         }      
....................         } 
....................    i=0; 
042D:  CLRF   3B
....................    p=0; 
042E:  BCF    21.1
....................      
....................     } 
....................    i=i+1; 
042F:  MOVLW  01
0430:  ADDWF  3B,F
0431:  GOTO   2FC
....................    
....................     
....................  
....................  
.................... } 
....................  
.................... } 
....................  
0432:  SLEEP
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
